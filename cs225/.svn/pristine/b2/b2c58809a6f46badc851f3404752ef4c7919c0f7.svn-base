/**
 * @file quadtree.h
 * Quadtree class definition.
 * @date Spring 2008
 */

#ifndef QUADTREE_H
#define QUADTREE_H

#include "png.h"
#include <iostream>
/**
 * A tree structure that is used to compress PNG images.
 */
class Quadtree
{
  public:
  
  Quadtree(); 
  
  Quadtree ( PNG const & source, int resolution); 

  ~Quadtree ();

  Quadtree (Quadtree const &other);

  Quadtree const & operator= (Quadtree const &other);
  
  void buildTree ( PNG const & source, int resolution); 
  
  RGBAPixel getPixel( int x, int y) const;
  
  PNG decompress()const;

  void clockwiseRotate();
  void prune(int tolerance);
  int pruneSize(int tolerance) const;
  int idealPrune(int numLeaves) const;
  
  private:

  // A simple class representing a single node of a Quadtree.
  // You may want to add to this class; in particular, it could probably
  // use a constructor or two...
  class QuadtreeNode
  {
    public:
    QuadtreeNode* nwChild;  // pointer to northwest child
    QuadtreeNode* neChild;  // pointer to northeast child
    QuadtreeNode* swChild;  // pointer to southwest child
    QuadtreeNode* seChild;  // pointer to southeast child

    RGBAPixel element;  // the pixel stored as this node's "data"
  };
  
  QuadtreeNode* root;    // pointer to root of quadtree
  
  int y0;
  int y1;
  int x0;
  int x1;


  QuadtreeNode* buildTree(PNG const & source, int Y0, int Y1, int X0, int X1);
  
  void clear();
  
  void clear( QuadtreeNode* subroot);
  
  void copy( const Quadtree & other );
  
  QuadtreeNode* copy(QuadtreeNode* othersub);
  
  QuadtreeNode* getPixel(int x, int y, int X0, int X1, int Y0, int Y1, QuadtreeNode* curr) const;

  void clockwiseRotate(QuadtreeNode* node); 

  bool checkdiff(QuadtreeNode * node, QuadtreeNode * node2,int tolerance);
  
  /**** Functions added for testing/grading                ****/
  /**** Do not remove this line or copy its contents here! ****/
  #include "quadtree_given.h"
};

#endif
