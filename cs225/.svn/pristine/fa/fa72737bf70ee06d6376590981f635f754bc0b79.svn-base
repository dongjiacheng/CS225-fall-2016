#include "maze.h"/* Your code here! */

SquareMaze::SquareMaze()
{	

}


void SquareMaze::makeMaze(int width,int height)
{
	DisjointSets newmaze;
	int size = width*height;
	newmaze.addelements(width*height);
	cell  smallelement;//thing to put in vector
	smallelement.rightWall = true;
	smallelement.downWall = true;
	vector<cell> newCells(size,smallelement);
	cells = newCells;
	for(int i = 0; i < size; ++i)
	{
	  cells[i].x = i%width;
	  cells[i].y = int(i/width);
	  cells[i].visited = false;
	}
	maze = newmaze;
	this->width = width;
	this->height = height;//new mze
	int step = 0;

	vector<int> myvector;
	for (int i = 0; i < size*2; ++i) 
	myvector.push_back(i);
	std::srand(time(NULL));
	std::random_shuffle (myvector.begin(), myvector.end());
	
	
	while(step < size*2)
	{
		int i = myvector[step];
		bool goright = false;
		if (i<size)
		{
			goright = true;
		}
		
		i = i % size;

		
		//int i =  rand() % size; 
		//if(cells[i].visited == true)
		//	continue;
		//++step;
		//cells[i].visited = true;
		
		if(cells[i].x < width-1)
		{
			if(cells[i].y < height-1)//all cells except the outer right and outer down
			{
				int currposition = cells[i].x + (cells[i].y)*width;
				if(goright)
		 	 {
				
				int nextRightpositon =  cells[i+1].x + (cells[i+1].y)*width;
				if(maze.find(currposition)!= maze.find(nextRightpositon))//the x+y*width is the biaoqain of each element.
				{
					cells[i].rightWall = false;
					maze.setunion(currposition,nextRightpositon);

					//step;
				}
			 }
			 	if(!goright){
				int nextDownpostion = cells[i+width].x + (cells[i+width].y)*width;
				if(maze.find(currposition)!= maze.find(nextDownpostion))
				{
					cells[i].downWall = false;
					maze.setunion(currposition,nextDownpostion);

					//++step;
				}
							}
			}
			else
			{
				if(goright){
				int currposition = cells[i].x + (cells[i].y)*width;
				int nextRightpositon =  cells[i+1].x + (cells[i+1].y)*width;
				if(maze.find(currposition)!= maze.find(nextRightpositon))//the x+y*width is the biaoqain of each element.
				{
				cells[i].rightWall = false;
				maze.setunion(currposition,nextRightpositon);

				//++step;

				}
						}
			}

		}
		else if (cells[i].y < height-1 && (!goright))
		{
			int currposition = cells[i].x + (cells[i].y)*width;
			int nextDownpostion = cells[i+width].x + (cells[i+width].y)*width;
			if(maze.find(currposition)!= maze.find(nextDownpostion))
				{
					cells[i].downWall = false;
					maze.setunion(currposition,nextDownpostion);

					//++step;
				}
		}
		++step;
	}

}

void SquareMaze::setWall(int x,int y,int dir, bool exists)
{
	int position = x + y*width;//postion of wall
	cells[position].x = x;
	cells[position].y = y;
	if(dir == 0)
	{
		cells[position].rightWall = exists;
	}
	else
	{
		cells[position].downWall = exists;
	}
}

bool SquareMaze::canTravel(int x, int y, int dir) const
{
	int currPostion = y*width + x;
	if(dir == 0 && x<(width-1))//right
	{
		if(cells[currPostion].rightWall == true)
			return false;
		else 
			return true;
	}
	else if (dir == 1 && y<(height-1))//down
	{
		if(cells[currPostion].downWall == true)
			return false;
		else
			return true;
	}
	else if (dir == 2 && x > 0)//left
	{
		int leftpostion = currPostion - 1;
		if(cells[leftpostion].rightWall == true)
			return false;
		else 
			return true;
	}
	else if (dir == 3 && y > 0)//up
	{
		int uppostion = currPostion - width;
		if(cells[uppostion].downWall == true)
			return false;
		else
			return true;
	}
	return false;
}


PNG * SquareMaze::drawMaze() const
{
	PNG* img = new PNG(10 * width + 1, 10 * height + 1);
	(*img)(0,0) -> red = 0;
	(*img)(0,0) -> green = 0;
	(*img)(0,0) -> blue = 0;
 for (int i = 0; i < 10*height; i++)//topmost
 	{
	(*img)(0,i) -> red = 0;
	(*img)(0,i) -> green = 0;
	(*img)(0,i) -> blue = 0;
    }
 for (int j = 10; j < 10*width; j++)//leftmost
 	{
	(*img)(j,0) -> red = 0;
	(*img)(j,0) -> green = 0;
	(*img)(j,0) -> blue = 0;
    }

    for (int i = 0; i < width*height; i++)
    {
    	int x = i%width;
    	int y =  i/width;
    	if(cells[i].rightWall == true)
    	{
    		for(int k = 0 ; k <= 10; k++)
    		{
    			(*img)((x+1)*10,y*10+k) -> red = 0;
				(*img)((x+1)*10,y*10+k) -> green = 0;
				(*img)((x+1)*10,y*10+k) -> blue = 0;
    		}
    	}
    	if(cells[i].downWall == true)
    	{
    		for(int k = 0 ; k <= 10; k++)
    		{
    			(*img)(x*10+k,(y+1)*10) -> red = 0;
				(*img)(x*10+k,(y+1)*10) -> green = 0;
				(*img)(x*10+k,(y+1)*10) -> blue = 0;
    		}
    	}
		
    }
    return img;
}


PNG * SquareMaze::drawMazeWithSolution	(		)	
{
	PNG * img = drawMaze();
	vector<int> path = solveMaze();
	int x = 5;
	int y = 5;
	for (size_t i=0; i<path.size(); i++) {
		if (path[i]== 0) {
			for (int j=0; j<=10; j++) 
			{
			(*img)(x + j,y) -> red = 255;
			(*img)(x + j,y) -> green = 0;
			(*img)(x + j,y) -> blue = 0;
	    	}
	    		x += 10;
		}
		else if (path[i]==1) {
			for (int j=0; j<=10; j++)
			{
			(*img)(x,y + j) -> red = 255;
			(*img)(x,y + j) -> green = 0;
			(*img)(x,y + j) -> blue = 0;
	   		}
	   		  y += 10;
		}
		else if (path[i]==2) {
			for (int j=0; j<=10; j++) 
			{
			(*img)(x - j,y) -> red = 255;
			(*img)(x - j,y) -> green = 0;
			(*img)(x - j,y) -> blue = 0;
	    	}
	    		x -= 10;
		}		
		else {
			for (int j=0; j<=10; j++) 
			{
			(*img)(x,y - j) -> red = 255;
			(*img)(x,y - j) -> green = 0;
			(*img)(x,y - j) -> blue = 0;
	    	}
	    		y -= 10;

		}	
	}
	// mark the exit
	
	for (int i = 1; i <= 9; i++)
	{
	(*img)(x-5+i,10 * height) -> red = 255;
	(*img)(x-5+i,10 * height) -> green = 255;
	(*img)(x-5+i,10 * height) -> blue = 255;
    }
	return img;
}


vector< int > SquareMaze::solveMaze	(		)	
{
	map<int, int> dis;
	dis[0]=0;
	map<int, int> parent;
	
	for (int i=0; i<width*height; i++)
		cells[i].visited = false;
	// BFS
	queue<int> q;
	q.push(0);
	while (!q.empty()) {
		int curr = q.front();
		q.pop();
		cells[curr].visited = true;
		int currentX = cells[curr].x;
		int currentY = cells[curr].y;
		if (canTravel(currentX,currentY,0)) {
			if(!cells[curr+1].visited)
			{
			dis[curr+1] = dis[curr] + 1;
			parent[curr+1] = curr;
			q.push(curr+1);
			std::cout<<curr+1<<std::endl;
			}
		}
		if (canTravel(currentX,currentY,1) ) {
			if(!cells[curr + width].visited)
			{
			dis[curr+width] = dis[curr] + 1;
			parent[curr+width] = curr;
			q.push(curr+width);
			std::cout<<curr+width<<std::endl;
			}
		}
		if (canTravel(currentX,currentY,2)) {
			if(!cells[curr-1].visited)
			{
			dis[curr-1] = dis[curr] + 1;
			parent[curr-1] = curr;
			q.push(curr-1);
			std::cout<<curr-1<<std::endl;
			}
		}
		if (canTravel(currentX,currentY,3)) {
			if(!cells[curr-width].visited)
			{
			dis[curr-width] = dis[curr] + 1;
			parent[curr-width] = curr;
			q.push(curr-width);
			std::cout<<curr-width<<std::endl;
			}
		}
	}
	std::cout<<q.size()<<std::endl;
	// Find the largest path
	int endpoint = 0;
	for (auto & it : dis) {
		if (cells[it.first].y == (height-1) && dis[endpoint] < it.second) 
			endpoint = it.first;
	}
	// Get the sequence of steps
	std::cout<<endpoint<<std::endl;
	vector<int> reversePath;
	std::cout<<reversePath.size()<<std::endl;
	while (endpoint!=0) 
	{
		int temp = parent[endpoint];
		if (endpoint - 1 == temp) reversePath.push_back(0);
		else if (endpoint - width == temp) reversePath.push_back(1);
		else if (endpoint + 1 == temp) reversePath.push_back(2);
		else reversePath.push_back(3);
		endpoint = temp;
	}
	std::cout<<parent.size()<<std::endl;
	std::cout<<dis.size()<<std::endl;
	std::cout<<reversePath.size()<<std::endl;
	vector<int> path;
	while (!reversePath.empty()) 
	{
		path.push_back(reversePath.back());
		reversePath.pop_back();
	}
	std::cout<<path.size()<<std::endl;
	for(int i = 0; i < int(dis.size()) ; i++)
		std::cout<<dis[i]<<' ';
	return path;
}



bool SquareMaze::noMoreDFS(int i)
{
	bool L,R,D,U;
	L  = false;
	R = false;
	D = false;
	U = false;
	int x = cells[i].x;
	int y = cells[i].x;
	if(canTravel(x,y,0))
	{
		int nextRightposition = i + 1;
		if(cells[nextRightposition].visited == false)
			R = true;
	}
	if(canTravel(x,y,1))
//down

	{
		int nextDownposition = i + width;
	if(cells[nextDownposition].visited == false)
			D = true;
	}

	if(canTravel(x,y,2))
//left
    {
	int nextLeftposition = i - 1;
	if(cells[nextLeftposition].visited == true)
			L = true;
	}

	if(canTravel(x,y,3))
//up	
	{
	int nextUpposition = i - width;
	if(cells[nextUpposition].visited == true)
			U = true;
	}
	return (!L) && (!R) && (!D) && (!U);
}


